#!/usr/bin/env bash
#!/usr/bin/env bash
# The famous "get a menu of emojis to copy" script.

set -euo pipefail
_path="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd "$(dirname "$(readlink "${BASH_SOURCE[0]}" || echo ".")")" && pwd)"

if [[ -f "${_path}/_dm-helper.sh" ]]; then
# shellcheck disable=SC1090,SC1091
    source "${_path}/_dm-helper.sh"
else
# shellcheck disable=SC1090
    echo 'No helper-script found'
fi

# Script will not hit this if there is no config-file to load
# shellcheck disable=SC1090
source "$(get_config)"

main() {
    cache_dir="${XDG_CACHE_HOME:-"$HOME/.cache"}"/dm-youtube
    [[ ! -d "$cache_dir" ]] && mkdir $cache_dir


    get_query() {
        if [[ -z "$1" ]]; then
            query=$(echo | {DMENU} 'Search YT Video:')
        else
            query="$1"
        fi

        [[ -z "$query" ]] && printf '\033[1;31m[ERROR]: A query is required to proceed.\033[0m\n' && exit 1

        echo "$query" >> "$cache_dir/search_hst"
        query="${query// /+}"
        echo "$query"
    }

    get_link() {

        # YT_API_KEY location
        YT_API_KEY="$( cat "${XDG_CONFIG_HOME}"/api_keys/youtube)"
        urlstring="https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query}&type=video&maxResults=20&key=${YT_API_KEY}"


        link="https://$( curl -s "${urlstring}" \
        | jq -r '.items[] | "\(.snippet.channelTitle) => \(.snippet.title) => youtu.be/\(.id.videoId)"' \
        | ${DMENU} 'Select Video -' \
        | tee -a "$cache_dir/play_hst"  \
        | awk '{print $NF}' \
        )"

        echo $link
    }


    # Populate arrays from history files
    if [[ -f "$cache_dir/search_hst" ]]; then
        sed -i 's/^$//' "$cache_dir/search_hst"
        uniq "$cache_dir/search_hst" | tac > "$cache_dir/search_hst_buf"
        readarray -t search_hst_list < "$cache_dir/search_hst_buf"
        printf "%s\n" "${search_hst_list[@]}"
        echo
    else
        touch "$cache_dir/search_hst"
    fi


    if [[ -f "$cache_dir/play_hst" ]]; then
        sed -i 's/^$//' "$cache_dir/play_hst"
        uniq "$cache_dir/play_hst" | tac > "$cache_dir/play_hst_buf"
        readarray -t play_hst_list < "$cache_dir/play_hst_buf"
        printf '%s\n' "${play_hst_list[@]}"
        echo
    else
        touch "$cache_dir/play_hst"
    fi


    # An array of options to choose.
    _options=(
    'Find Video'
    'Recent Plays'
    'Search History'
    )


    choice=$(printf '%s\n' "${_options[@]}" | ${DMENU} 'Browse YT' "${@}" )


    if [[ "$choice" == 'Find Video' ]]; then
        get_query
        get_link

        setsid -f mpv --profile=hadouken "$link" > /dev/null 2>&1 || echo "Couldn't launch player" && exit 1


    elif [[ "$choice" == 'Recent Plays' ]]; then

        getVid=$(printf '%s\n' "${play_hst_list[@]}" | ${DMENU} 'Previously Played:' "$@")
        link="https://$(echo $getVid | awk '{print $NF}')"
        echo $link

        setsid -f mpv --profile=hadouken "$link" > /dev/null 2>&1 || echo "Couldn't launch player" && exit 1


    elif [[ "$choice" == 'Search History' ]]; then
        query=$(printf '%s\n' "${search_hst_list[@]}" | ${DMENU} 'Recently Searched:' "$@")
        [[ -z "$query" ]] && printf '\033[1;31m[ERROR]: A query is required to proceed.\033[0m\n' && exit 1 
        query="${query// /+}"

        get_link
        setsid -f mpv --profile=hadouken "$link" > /dev/null 2>&1 || echo "Couldn't launch player" && exit 1

    else
        echo 'Program terminated.' && exit 0
    fi
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
