#!/usr/bin/env bash

set -euo pipefail

_path="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd "$(dirname "$(readlink "${BASH_SOURCE[0]}" || echo ".")")" && pwd)"

if [[ -f "${_path}/_dm-helper.sh" ]]; then
# shellcheck disable=SC1090,SC1091
    source "${_path}/_dm-helper.sh"
else
# shellcheck disable=SC1090
    echo "No helper-script found"
fi

# Script will not hit this if there is no config-file to load
# shellcheck disable=SC1090
source "$(get_config)"

# Using myyt code (BugsWriter) to play music from youtube.com.

get_query() {
    query=$( echo | ${DMENU} 'Search YT:' "$@" )
    echo "$query" >> "$cache_dir/search_hst"
    query="${query// /+}"
}

# TODO: Return now_playing as a string instead of storing in file
get_link() {
    # Add Youtube API key.
    YT_API_KEY="$( cat "$XDG_CONFIG_HOME"/api_keys/youtube)"
    urlstring="https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query}&type=video&maxResults=50&key=${YT_API_KEY}"

    # Get desired video link.
    link="https://$( curl -s "${urlstring}" \
    | jq -r '.items[] | "\(.snippet.channelTitle) => \(.snippet.title) => youtu.be/\(.id.videoId)"' \
    | dmenu -fn Mononoki-nerd-font -i -p 'Select M/V -' -l 20 \
    | tee "$cache_dir/now_playing"  \
    | tee -a "$cache_dir/play_hst"  \
    | awk '{print $NF}' \
    )"
}

setup() {
    down_dir=~/Music/youtube
    [[ -d "$down_dir" ]] || mkdir -p $down_dir

    cache_dir=${XDG_CACHE_HOME:-$HOME/.cache}/dm-yt-music
    [[ -d "$cache_dir" ]] || mkdir -p $cache_dir

    socket="${XDG_CACHE_HOME:-$HOME/.cache}/mpv-ipc-socket"
    player="mpv --no-video --input-ipc-server="$socket""


    # TODO: Try sqlite instead of files
    # Populate arrays from history files
    if [[ -f "$cache_dir/search_hst" ]]; then
        sed -i 's/^$//' "$cache_dir/search_hst"
        uniq "$cache_dir/search_hst" | tac > "$cache_dir/search_hst_buf"
        readarray -t search_hst_list < "$cache_dir/search_hst_buf"
        printf "%s\n" "${search_hst_list[@]}"
        echo
    else
        touch "$cache_dir/search_hst"
    fi


    if [[ -f "$cache_dir/play_hst" ]]; then
        sed -i 's/^$//' "$cache_dir/play_hst"
        uniq "$cache_dir/play_hst" | tac > "$cache_dir/play_hst_buf"
        readarray -t play_hst_list < "$cache_dir/play_hst_buf"
        printf "%s\n" "${play_hst_list[@]}"
        echo
    else
        touch "$cache_dir/play_hst"
    fi


    if [[ ! -f "$cache_dir/now_playing" ]]; then
        touch "$cache_dir/now_playing"
    fi
}

kill_player() {
    echo 'quit' | socat - "$socket" &> /dev/null || echo "No player instance found."
}

main() {
    setup

    # An array of options to choose.
    local _options=(
    "Find M/V"
    "Recent Plays"
    "Search History"
    "Random Song" 
    "Download Music"
    "Play/Pause Player"
    "Kill Player"
    )


    # Piping the _options array into dmenu.
    # We use "printf '%s\n'" to format the array one item to a line.
    choice=$(printf '%s\n' "${_options[@]}" | ${DMENU} 'YT Music' "${@}") || exit 1

    if [ "$choice" == "Find M/V" ]; then
        get_query
        kill_player

        get_link
        printf "$link\n"

        # Call mpv without video.
        notify-send -i /usr/share/icons/Papirus/32x32/apps/org.gnome.Music.svg "Now Playing ..." "$(awk 'NF{NF-=2};1' $cache_dir/now_playing)"
        $player "$link" && exit 0


    elif [ "$choice" == "Search History" ]; then
        query=$(printf '%s\n' "${search_hst_list[@]}" | ${DMENU} 'Recently Searched:' "$@")
        query="${query// /+}"

        kill_player
        get_link
        printf "$link\n"

        # Play the chosen Song.
        #shellcheck disable=SC2154
        notify-send -i /usr/share/icons/Papirus/32x32/apps/org.gnome.Music.svg "Now Playing ..." "$(awk 'NF{NF-=2};1' $cache_dir/now_playing)"
        $player "$link" && exit 0


    elif [ "$choice" == "Random Song" ]; then
        getRand=$(printf '%s\n' "${play_hst_list[@]}" | shuf -n 1)
        link="https://$(echo $getRand | awk '{print $NF}')"
        kill_player

        # Play random song file.
        notify-send -i /usr/share/icons/Papirus/32x32/apps/org.gnome.Music.svg "Now Playing ..." "$(echo $getRand | awk 'NF{NF-=2};1')"
        $player "$link" && exit 0


    elif [ "$choice" == "Recent Plays" ]; then
        getSong=$(printf '%s\n' "${play_hst_list[@]}" | ${DMENU} 'Previously Played:' "$@")
        link="https://$(echo $getSong | awk '{print $NF}')"
        kill_player

        notify-send -i /usr/share/icons/Papirus/32x32/apps/org.gnome.Music.svg "Now Playing ..." "$(echo $getSong | awk 'NF{NF-=2};1')"
        $player "$link" && exit 0


    elif [ "$choice" == "Download Music" ]; then
        get_query
        get_link

        notify-send -i "/usr/share/icons/Papirus/16x16/apps/youtube-dl.svg" "Downloading ..." "$(awk 'NF{NF-=2};1' $cache_dir/now_playing)"
        yt-dlp -f 'ba' --audio-format mp3 $link -o $down_dir/"$(awk 'NF{NF-=2};1' $cache_dir/now_playing | cut --complement -d' ' -f 1-2 | sed "s/^=> //").mp3" && exit 0

    elif [ "$choice" == "Kill Player" ]; then
        kill_player

    elif [ "$choice" == "Play/Pause Player" ]; then
        echo "cycle pause" | socat - "$socket"

    else
        echo "Program terminated." && exit 0
    fi
    }

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
